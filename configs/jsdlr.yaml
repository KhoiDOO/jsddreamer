name: "jsdlr"
tag: "${rmspace:${system.prompt_processor.prompt},_}"
exp_root_dir: "outputs"
seed: 0

data_type: "random-camera-datamodule"
data:
  batch_size: [1, 1]
  width: [256, 512]
  height: [256, 512]
  resolution_milestones: [2000]
  camera_distance_range: [1.0, 1.5]
  fovy_range: [40, 70]
  elevation_range: [-10, 45]
  camera_perturb: 0.
  center_perturb: 0.
  up_perturb: 0.
  light_sample_strategy: "dreamfusion"
  eval_camera_distance: 1.5
  eval_fovy_deg: 70.

system_type: "jsd-system"
system:
  # cleanup_after_validation_step: true
  # cleanup_after_test_step: true

  # symmetrize: true

  geometry_type: "implicit-volume"
  geometry:
    radius: 2 # 1
    normal_type: "analytic"

    # use Magic3D density initialization
    density_bias: "blob_magic3d"
    density_activation: softplus
    density_blob_scale: 10.
    density_blob_std: 0.5

    # coarse to fine hash grid encoding
    # to ensure smooth analytic normals
    pos_encoding_config:
      otype: HashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378 # max resolution 4096

  material_type: "diffuse-with-point-light-material"
  material:
    ambient_only_steps: 1000
    albedo_activation: sigmoid
    diffuse_prob: 0.3
    textureless_prob: 0.75
    ambient_only_on_test: true

  background_type: "neural-environment-map-background"
  background:
    color_activation: sigmoid
    # random_aug: true
    # share_aug_bg: true

  renderer_type: "nerf-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    num_samples_per_ray: 512
    return_comp_normal: true

  prompt_processor_type: "stable-diffusion-prompt-processor"
  prompt_processor:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    prompt: ???
    use_perp_neg: true

  guidance_type: "stable-diffusion-jsd-guidance"
  guidance:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    # enable_memory_efficient_attention: true
    # enable_attention_slicing: true
    # enable_vae_slicing: true
    # enable_vae_tiling: true
    # enable_sequential_cpu_offload: true
    guidance_scale: 13.5
    min_step_percent: 0.25
    max_step_percent: 0.98

    inversion_guidance_scale: -13.5
    inversion_n_steps: 10
    inversion_eta: 0.3
    k: 1
    warm_step: 0

  loggers:
    wandb:
      enable: false
      project: "threestudio"
      name: None

  loss:
    lambda_jsd: 1.
    lambda_orient: 0.1 # 0.5 # 0.1
    lambda_sparsity: [0,0.15,0.,3000]
    lambda_opaque: 0.1 # 1 # 0.1
    lambda_convex: [0,1.,0.1,4000]
    lambda_z_variance: 1.
    # lambda_tv : 0

  optimizer:
    name: Adam
    args:
      lr: 0.01 # * N accumlate batch size
      betas: [0.9, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.01 # * N accumlate batch size
      background:
        lr: 0.001 # * N accumlate batch size

trainer:
  max_steps: 10000 # * N accumlate batch size
  log_every_n_steps: 1 # * N accumlate batch size
  num_sanity_val_steps: 0
  val_check_interval: 200 # * N accumlate batch size
  enable_progress_bar: true
  precision: 16-mixed
  # accumulate_grad_batches: 8

checkpoint:
  save_last: true # save at each validation time
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}
